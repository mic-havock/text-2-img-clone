const express = require("express");
const cors = require("cors");
const path = require("path");
const fs = require("fs-extra");
const { v4: uuidv4 } = require("uuid");
const axios = require("axios");

const app = express();
const PORT = process.env.PORT || 3000;

// Stable Diffusion WebUI API configuration
const SD_API_URL = "http://localhost:7860";
const SD_API_TIMEOUT = 300000; // 5 minutes timeout

// Middleware
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

// Serve static files from the client build directory
app.use(express.static(path.join(__dirname, "client", "build")));

// Ensure directories exist
const uploadsDir = path.join(__dirname, "uploads");
const generatedDir = path.join(__dirname, "generated");

fs.ensureDirSync(uploadsDir);
fs.ensureDirSync(generatedDir);

/**
 * Check if Stable Diffusion WebUI is running
 * @returns {Promise<boolean>} True if WebUI is available
 */
async function checkSDWebUI() {
  try {
    const response = await axios.get(`${SD_API_URL}/sdapi/v1/progress`, {
      timeout: 5000,
    });
    return response.status === 200;
  } catch (error) {
    console.log("Stable Diffusion WebUI not available:", error.message);
    return false;
  }
}

/**
 * Generate image using the Lustify model via Stable Diffusion WebUI API
 * @param {Object} params - Generation parameters
 * @param {string} params.prompt - Text prompt
 * @param {number} params.steps - Number of steps
 * @param {number} params.cfg - CFG scale
 * @param {string} params.sampler - Sampler name
 * @param {string} params.scheduler - Scheduler name
 * @param {number} params.width - Image width
 * @param {number} params.height - Image height
 * @param {number} params.upscale - Upscale factor
 * @param {number} params.denoising - Denoising strength
 * @returns {Promise<Object>} Generation result
 */
async function generateImageWithSD(params) {
  try {
    // Check if WebUI is available
    const isWebUIAvailable = await checkSDWebUI();
    if (!isWebUIAvailable) {
      throw new Error(
        "Stable Diffusion WebUI is not running. Please start it first."
      );
    }

    // Prepare the API request payload
    const payload = {
      prompt: params.prompt,
      negative_prompt:
        "lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry",
      steps: params.steps,
      cfg_scale: params.cfg,
      width: params.width,
      height: params.height,
      sampler_name: params.sampler,
      scheduler: params.scheduler,
      restore_faces: false,
      tiling: false,
      enable_hr: params.upscale > 1.0,
      hr_scale: params.upscale,
      hr_upscaler: "Latent",
      hr_second_pass_steps: Math.floor(params.steps * 0.5),
      hr_resize_x: Math.floor(params.width * params.upscale),
      hr_resize_y: Math.floor(params.height * params.upscale),
      denoising_strength: params.denoising,
    };

    console.log("Sending request to Stable Diffusion WebUI:", payload);

    // Send the request to Stable Diffusion WebUI
    const response = await axios.post(
      `${SD_API_URL}/sdapi/v1/txt2img`,
      payload,
      {
        timeout: SD_API_TIMEOUT,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    if (
      response.data &&
      response.data.images &&
      response.data.images.length > 0
    ) {
      // Save the generated image
      const imageData = response.data.images[0];
      const imageBuffer = Buffer.from(imageData, "base64");
      const filename = `generated_${uuidv4()}.png`;
      const imagePath = path.join(generatedDir, filename);

      await fs.writeFile(imagePath, imageBuffer);

      return {
        success: true,
        imageUrl: `/generated/${filename}`,
        imagePath: imagePath,
        prompt: params.prompt,
        parameters: params,
        info: response.data.info || {},
      };
    } else {
      throw new Error("No image generated by Stable Diffusion WebUI");
    }
  } catch (error) {
    console.error("Error generating image:", error);
    throw error;
  }
}

// Serve generated images
app.use("/generated", express.static(generatedDir));

// API endpoint for image generation
app.post("/api/generate", async (req, res) => {
  try {
    const {
      prompt,
      steps,
      cfg,
      sampler,
      scheduler,
      width,
      height,
      upscale,
      denoising,
    } = req.body;

    // Validate required parameters
    if (!prompt || prompt.trim() === "") {
      return res.status(400).json({ error: "Prompt is required" });
    }

    // Set default values for missing parameters
    const params = {
      prompt: prompt.trim(),
      steps: steps || 30,
      cfg: cfg || 3.0,
      sampler: sampler || "DPM++ 2M SDE",
      scheduler: scheduler || "Exponential",
      width: width || 512,
      height: height || 512,
      upscale: upscale || 1.0,
      denoising: denoising || 0.4,
    };

    console.log("Generating image with parameters:", params);

    // Generate the image
    const result = await generateImageWithSD(params);

    res.json(result);
  } catch (error) {
    console.error("Generation error:", error);
    res.status(500).json({
      error: error.message || "Failed to generate image",
      details: error.response?.data || error.stack,
    });
  }
});

// Health check endpoint
app.get("/api/health", async (req, res) => {
  try {
    const isWebUIAvailable = await checkSDWebUI();
    res.json({
      status: "ok",
      sd_webui_available: isWebUIAvailable,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    res.status(500).json({
      status: "error",
      error: error.message,
      sd_webui_available: false,
    });
  }
});

// Catch-all handler for React app
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "client", "build", "index.html"));
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
  console.log(`üé® Image generation: http://localhost:${PORT}/api/generate`);
  console.log(`üåê Frontend: http://localhost:${PORT}`);
});
